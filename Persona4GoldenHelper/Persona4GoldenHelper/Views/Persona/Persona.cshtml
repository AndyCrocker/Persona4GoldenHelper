@model PersonaViewModel

<div hidden>
    @* Store some data in hidden elements for easy retrieval in javascript *@
    <a id="target-persona-name">@Model.Persona.Name</a>
    <a id="target-persona-arcana">@Model.Persona.Arcana</a>
</div>

<div>
    <h2 class="text-align-center col-md-12 col-sm-12 col-xs-12">
        @Model.Persona.Name (@Model.Persona.Level/@Model.Persona.Arcana)
        <span class="type-ultimate" @(Model.Persona.Ultimate ? "" : "hidden")>Ultimate</span>
        <span class="type-new-game" @(Model.Persona.NewGame ? "" : "hidden")>New Game+</span>
    </h2>
</div>

<div>
    <h3 class="text-align-center col-md-12 col-sm-12 col-xs-12">Stats</h3>
    <table class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
        <thead>
            <tr>
                <th class="text-align-center slim-column">Strength</th>
                <th class="text-align-center slim-column">Magic</th>
                <th class="text-align-center slim-column">Endurance</th>
                <th class="text-align-center slim-column">Agility</th>
                <th class="text-align-center slim-column">Luck</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-align-center">@Model.Persona.Stats.Strength</td>
                <td class="text-align-center">@Model.Persona.Stats.Magic</td>
                <td class="text-align-center">@Model.Persona.Stats.Endurance</td>
                <td class="text-align-center">@Model.Persona.Stats.Agility</td>
                <td class="text-align-center">@Model.Persona.Stats.Luck</td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    <h3 class="text-align-center col-md-12 col-sm-12 col-xs-12">Elements</h3>
    <table class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
        <thead>
            <tr>
                <th class="text-align-center slim-column"><img src="~/img/Physical.png" alt="Physical" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Fire.png" alt="Fire" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Ice.png" alt="Ice" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Electric.png" alt="Electric" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Wind.png" alt="Wind" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Light.png" alt="Light" /></th>
                <th class="text-align-center slim-column"><img src="~/img/Dark.png" alt="Dark" /></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-align-center affinity-@Model.Persona.Elements.Physical">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Physical)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Fire">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Fire)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Ice">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Ice)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Electricity">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Electricity)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Wind">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Wind)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Light">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Light)</td>
                <td class="text-align-center affinity-@Model.Persona.Elements.Darkness">@ConvertElementAffinityToShortHand(Model.Persona.Elements.Darkness)</td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    <h3 class="text-align-center col-md-12 col-sm-12 col-xs-12">Skills</h3>
    <table class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
        <thead>
            <tr>
                <th class="text-align-center">Level</th>
                <th>Name</th>
                <th>Effect</th>
                <th class="text-align-center slim-column">Cost</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Persona.Skills.Count(); i++)
            {
                var skill = Model.Skills[i];
                var personaSkill = Model.Persona.Skills[i];

                <tr>
                    <td class="text-align-center">@personaSkill.LevelRequired</td>
                    <td class="text-bright">@skill.Name</td>
                    <td>@skill.Effect</td>
                    <td class="text-align-center @CalculateCostType(skill.Cost)">@(skill.Cost != "" ? skill.Cost : "-")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <h3 class="text-align-center col-md-12 col-sm-12 col-xs-12">Recipes (<span id="recipe-count" class="text-dark">?</span>)</h3>
    <div id="recipe-scroll-container" class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
        <div id="recipe-scroll">
            <table id="recipe-table">
                <thead>
                    <tr>
                        <th class="slim-column text-align-center">Cost</th>
                        <th>Ingredients</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <h4 id="see-more-recipes" class="col-md-12 col-sm-12 col-xs-12 text-align-center button" onclick="populateRecipeTable()">See More</h4>
        </div>
    </div>
</div>

@using static Persona4GoldenHelper.Data.Enums
@functions {
    /// <summary>This will convert the element affinities ("None", "Weak", "Resistant" etc) into shorter versions ("", "wk", "rs" etc) for easy of reading and displaying.</summary>
    /// <param name="element">The element affinity to convert</param>
    /// <returns>The short hand version of the affinity</returns>
    public static string ConvertElementAffinityToShortHand(ElementAffinity element)
    {
        Dictionary<string, string> converter = new Dictionary<string, string>
{
            { "Weak", "wk" },
            { "None", "-" },
            { "Resistant", "rs" },
            { "Null", "nu" },
            { "Reflect", "rf" },
            { "Absorb", "ab" }
        };

        return converter[element.ToString()];
    }

    public static string CalculateCostType(string cost)
    {
        if (cost.Length == 0)
        {
            return "";
        }

        if (cost[cost.Length - 2] == 'S')
        {
            return "cost-sp";
        }

        if (cost[cost.Length - 2] == 'H')
        {
            return "cost-hp";
        }

        return "";
    }
}