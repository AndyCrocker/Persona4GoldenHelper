@model ShadowListingViewModel

@{
    List<string> distinctShadowNames = GetDistinctShadowNames();
}

<div>
    <h2 class="text-align-center col-md-12 col-sm-12 col-xs-12">Shadows</h2>
    <table class="alterate-tbody-colour col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
        <thead>
            <tr>
                <th>Name</th>
                <th class="text-align-center">Type</th>
                <th class="extra-slim-column text-align-center">Level</th>
                <th class="extra-slim-column text-align-center mobile-hidden">St</th>
                <th class="extra-slim-column text-align-center mobile-hidden">Mg</th>
                <th class="extra-slim-column text-align-center mobile-hidden">En</th>
                <th class="extra-slim-column text-align-center mobile-hidden">Ag</th>
                <th class="extra-slim-column text-align-center mobile-hidden">Lu</th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Physical.png" alt="Physical" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Fire.png" alt="Fire" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Ice.png" alt="Ice" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Electric.png" alt="Electric" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Wind.png" alt="Wind" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Light.png" alt="Light" /></th>
                <th class="extra-slim-column text-align-center mobile-hidden"><img src="~/img/Dark.png" alt="Dark" /></th>
            </tr>
        </thead>
        @foreach (var shadowName in distinctShadowNames)
        {
            var shadows = GetShadowsByName(shadowName);
            <tbody>
                @* Each shadow has it's own tbody so when a shadow has multiple types, it makes tr highlighting easier to fix *@
                @for (int i = 0; i < shadows.Count; i++)
                {
                    var shadow = shadows[i];

                    <tr>
                        @if (i == 0)
                        {
                            <td rowspan=@shadows.Count><a asp-action="@shadow.Name">@shadow.Name</a></td>
                        }

                        <td class="text-align-center type-@shadow.Type">@(shadow.Type.ToString() == "MiniBoss" ? "Mini Boss" : shadow.Type.ToString())</td>
                        <td class="text-align-center">@shadow.Level</td>
                        <td class="text-align-center mobile-hidden">@shadow.Stats.Strength</td>
                        <td class="text-align-center mobile-hidden">@shadow.Stats.Magic</td>
                        <td class="text-align-center mobile-hidden">@shadow.Stats.Endurance</td>
                        <td class="text-align-center mobile-hidden">@shadow.Stats.Agility</td>
                        <td class="text-align-center mobile-hidden">@shadow.Stats.Luck</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Physical">@ConvertElementAffinityToShortHand(shadow.Elements.Physical)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Fire">@ConvertElementAffinityToShortHand(shadow.Elements.Fire)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Ice">@ConvertElementAffinityToShortHand(shadow.Elements.Ice)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Electricity">@ConvertElementAffinityToShortHand(shadow.Elements.Electricity)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Wind">@ConvertElementAffinityToShortHand(shadow.Elements.Wind)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Light">@ConvertElementAffinityToShortHand(shadow.Elements.Light)</td>
                        <td class="text-align-center mobile-hidden font-bold affinity-@shadow.Elements.Darkness">@ConvertElementAffinityToShortHand(shadow.Elements.Darkness)</td>
                    </tr>
                }
            </tbody>
        }
    </table>
    <h3 class="no-results text-error text-align-center col-md-12 col-sm-12 col-xs-12" hidden>No results</h3>
</div>

@using Persona4GoldenHelper.Data.Enums
@functions {
    /// <summary>Return a list with duplicated shadow names returned from Model.Shadows. (Used for seperating each shadow into a seperate tbody)</summary>
    /// <returns></returns>
    private List<string> GetDistinctShadowNames()
    {
        return Model.Shadows
            .Select(shadow => shadow.Name)
            .Distinct()
            .ToList();
    }

    /// <summary>Get all the shadows that have the specified name.</summary>
    /// <param name="name">The name of the shadows to return.</param>
    /// <returns>A list of shadows.</returns>
    private List<Shadow> GetShadowsByName(string name)
    {
        return Model.Shadows
            .Where(shadow => shadow.Name == name)
            .ToList();
    }

    /// <summary>This will convert the element affinities ("None", "Weak", "Resistant" etc) into shorter versions ("", "wk", "rs" etc) for easy of reading and displaying.</summary>
    /// <param name="element">The element affinity to convert</param>
    /// <returns>The short hand version of the affinity</returns>
    public static string ConvertElementAffinityToShortHand(ElementAffinity element)
    {
        Dictionary<string, string> converter = new Dictionary<string, string>
        {
            { "Weak", "wk" },
            { "None", "-" },
            { "Resistant", "rs" },
            { "Null", "nu" },
            { "Reflect", "rf" },
            { "Absorb", "ab" }
        };

        return converter[element.ToString()];
    }
}